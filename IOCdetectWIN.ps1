<#
.SYNOPSIS
Common IOC Powershell Detection Script
.DESCRIPTION
Uses known IOC strings executed through cmd, powershell, etc to discover common exploit patterns in APTs on Windows.
The script will search through the following event viewer logs:
(Audit Process Creation logging) Audit event 4688
(Audit Other Object Access Events) Audit event 4698
(PowerShell Script Block Logging) - Microsoft-Windows-PowerShell/Operational event 4104
REQUIRES POWERSHELL MODULE Get-Base64RegularExpression DOWNLOAD @ https://www.leeholmes.com/searching-for-content-in-base-64-strings/
.EXAMPLE
PS> . .\IOCdetectWIN.ps1
Run the script with default settings
.NOTES
.Author: James Kelly
https://gmuisg.org
#>

#///////////////////////////////////////////////////////////////////////////////////////////////////
# *** THIS MODULE IS REQUIRED FOR SCRIPT TO RUN ***
# Get-Base64RegularExpression https://www.leeholmes.com/searching-for-content-in-base-64-strings/
# Type in powershell Install-Script Get-Base64RegularExpression.ps1
# *** THIS MODULE IS REQUIRED FOR SCRIPT TO RUN ***
#///////////////////////////////////////////////////////////////////////////////////////////////////

# REQUIRES Audit Process Creation logging. Audit event 4688(S): "A new process has been created" Configure/Enable the following: "Administrative Templates\System\Audit Process Creation" 'Include command line in process creation events' https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing
# REQUIRES Audit Other Object Access Events. Audit event 4698(S): "This policy setting allows you to audit events generated by the management of task scheduler jobs or COM+ objects."
# REQUIRES Audit Policy Change. Audit event 4719 : "If Success auditing is enabled, an audit entry is generated when an attempted change to user rights assignment policy, audit policy, or trust policy is successful."
# REQUIRES Turn on PowerShell Script Block Logging - This policy setting enables logging of all # PowerShell script input to the Microsoft-Windows-PowerShell/Operational event log Windows #PowerShell will log the processing of commands, script blocks, functions, and scripts - whether # invoked interactively, or through automation.

$datestring = (Get-Date).ToString('s').Replace(':','-')
$saveDirMaster = 'C:\Security\'

$outputGrid = $True
$saveToFile = $True
$hoursToLookBack = -24 #Include -(followed by hours), -48 = Two days

$scanWinProcess = $True #You can enable/disable these *keep in mind speed will go down
$scanWinAudit = $True #You can enable/disable these *keep in mind speed will go down
$scanWinTask = $True #You can enable/disable these *keep in mind speed will go down
$scanWinAV = $True #You can enable/disable these *keep in mind speed will go down
$scanWinPSLogs = $False #You can enable/disable these *keep in mind speed will go down, disabled until workaround
$scanBase64Process = $False #You can enable/disable these *keep in mind speed will go down
$scanBase64Tasks = $True #You can enable/disable these
$scanBase64WinAV = $True #You can enable/disable these
$scanBase64WinPS = $False #You can enable/disable these *keep in mind speed will go down

$IOCPatterns=$ioc_process=$ioc_winps=$ioc_winav=$ioc_task=$ioc_taskbase64=$ioc_winpsbase64=$ioc_winavbase64=$ioc_processbase64=$processfilter=$auditpolicyfilter=$taskfilter=$winavfilter=$winpsfilter = ''
$savedir = $saveDirMaster + $datestring + '.txt'
$savedir2 = $saveDirMaster + $datestring + '.txt' 
$Width = -1 * ((Measure-Object -Maximum length).maximum + 1) 

if(!(Get-InstalledScript | Select-String 'Get-Base64RegularExpression')){ #Check to make sure user has script installed
	Write-Warning('**You do not have the required script to use Base64 scanning feature!!! Install-Script -Name Get-Base64RegularExpression')
	$scanBase64Process = $False
	$scanBase64Tasks = $False
	$scanBase64WinAV = $False
	$scanBase64WinPS = $False
}

if(!([bool](([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544"))){ #detect if powershell running as admin, if not reduce scanning to WinAV and 
  Write-Warning('**Please run script as Administrator**')
  return
}


$processfilter = @{
  LogName = 'Security'
  ID = 4688 #New process eventID
  StartTime = [datetime]::Now.AddHours($hoursToLookBack) #How far to look back in logs
}

$auditpolicyfilter = @{
  LogName = 'Security'
  ID = 4719, 1102 #Audit Policy change /All Events cleared log (System audit policy was changed.)
  StartTime = [datetime]::Now.AddHours($hoursToLookBack) #How far to look back in logs
}

$taskfilter = @{
  LogName = 'Security'
  ID = 4698 #New ScheduledTasks
  StartTime = [datetime]::Now.AddHours($hoursToLookBack) #How far to look back in logs
}

$winavfilter = @{
  LogName = 'Microsoft-Windows-Windows Defender/Operational'
  ID = 5001, 5007, 1116, 1121 #Defender modifications
  StartTime = [datetime]::Now.AddHours($hoursToLookBack)
}

$winpsfilter = @{ #WIP need to find workaround for script execution, Use out-grid filter DOES NOT CONTAIN
  LogName = 'Microsoft-Windows-PowerShell/Operational'
  ID = 4104 #Powershell Scriptblock - Execute a Remote Command
  StartTime = [datetime]::Now.AddHours($hoursToLookBack)
}

$IOCPatterns = ('<Hidden>true</Hidden>',#Next strings are common in APTs in schtasks/powershell/new process creation on infected machines, had to remove F[i]nd-AVsignature defender had that in signature detection :( submit the ASMI info to their sample submission
  '-WindowStyle Hidden',
  'schtasks /create /tn',
  'schtasks /delete /tn',
  'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings',
  '%COMSPEC%',
  '-ExecutionPolicy Bypass -WindowStyle Hidden -noprofile -noexit',
  '-nop -NoProfile -WindowStyle 1 -enc',
  'powershell -w h',
  'powershell/w 01',
  'powershell/w 01 /ep 0/nop/c',
  'powershell -noP -sta -w 1 -enc',
  'powershell.exe -exec bypass',
  'powershell -command',
  'powershell -c iex',
  'powershell -c iwr',
  'Invoke-Expression',
  'Invoke-WebRequest',
  'Invoke-Command',
  'Get-ComputerInfo',
  'EICAR-STANDARD-ANTIVIRUS-TEST-FILE',
  '[Reflection.Assembly]::Load',
  'wmic /namespace:\\root\\SecurityCenter2 path AntiVirusProduct get * /value',
  'Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct',
  'Add-MpPreference -ExclusionPath',
  'Add-MpPreference -ExclusionExtension',
  'Add-MpPreference -ExclusionProcess',
  'HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Exclusions',
  'HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableRealtimeMonitoring',
  'Microsoft Defender Antivirus Real-time Protection scanning for malware and other potentially unwanted software was disabled.',
  'Microsoft Defender Exploit Guard has blocked an operation that is not allowed by your IT administrator.',
  'Set-MpPreference -DisableRealtimeMonitoring $true',
  'IEX (New-Object Net.WebClient).DownloadString',
  'rundll32.exe javascript:',
  'New-Object Net.WebClient',
  'New-Object System.Net.WebClient',
  '-NonInteractive',
  '-NoLogo',
  '-ExecutionPolicy bypass',
  '-encodedcommand',
  '-enc',
  'powershell . (nslookup -q=txt)', #way to avoid iex and web request through webpage with code twitter @Alh4zr3d
  '& powershell (nslookup -q=txt)', #way to avoid iex and web request through webpage with code twitter @Alh4zr3d
  '(nslookup -q=txt)[-1]', #way to avoid iex and web request through webpage with code twitter @Alh4zr3d
  'nslookup -q=txt', #way to avoid iex and web request through webpage with code twitter @Alh4zr3d
  'C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp',
  '\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup',
  'base64_encode',
  'base64_decode',
  'cmd.exe /Q /c start',
  'Scriptrunner.exe',
  'Cscript.exe',
  'WScript.exe',
  'regsvr32.exe',
  'wmic process call create',
  'msiexec /q /i',
  'Get-EventLog -LogName * | ForEach { Clear-EventLog $_.Log',
  'Get-WinEvent -ListLog * -Force | % { Wevtutil.exe cl $_.LogName }',
  'Clear-EventLog',
  '[System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog',
  'The audit log was cleared.',
  'System audit policy was changed.',
  'wevtutil.exe cl',
  'certutil -urlcache -split -f',
  'vssadmin.exe Delete Shadows /All /Quiet',
  'bitsadmin.exe',
  'bitsadmin /SetNotifyCmdLine',
  'bitsadmin /addfile',
  'bitsadmin /transfer',
  'Start-BitsTransfer -Source',
  'VBscript.Encode',
  'WScript.Shell',
  'WScriptShell.CreateShortcut',
  'WScriptShell.SpecialFolders',
  'msdt.exe',
  'mshta.exe',
  'PCWDiagnostic',
  'ms-msdt:-id',
  'ms-msdt:/id',
  'ms-msdt:/id PCWDiagnostic /skip force /param',
  'Set-ExecutionPolicy',
  'procdump.exe',
  'pypykatz live lsa --method handledup', #detect runasppl bypass
  'mimikatz.exe',
  'Mimikatz',
  'powercat',
  'EncodedCommand',
  'Payload',
  'Find-PSServiceAccounts',
  'Get-PSADForestKRBTGTInfo',
  'Discover-PSMSSQLServers',
  'Discover-PSMSExchangeServers',
  'Get-PSADForestInfo',
  'Get-KerberosPolicy',
  'Discover-PSInterestingServices')

filter MultiSelect-String ([string[]]$Patterns) {
  foreach ($Pattern in $Patterns) { # Check the current item against all patterns.
	  $foundPattern = $_ | Select-String -Pattern $Pattern #Optimize var cache
    if ($foundPattern) { # If one of the patterns does not match, continue checking same item.
      $_ #We found a match!
    } else {
      continue
    }
  }
}

filter MultiSelect-Base64String ([string[]]$Patterns) {
  foreach ($Pattern in $Patterns) { # Check the current item against all patterns.
    $regex = (Get-Base64RegularExpression $Pattern) #Optimize var cache
    $foundPattern = $_ | Select-String -Pattern $regex
    if ($foundPattern) { # If one of the patterns does not match, continue checking same item.
      $_ #We found a match!
      Write-Warning ("*BASE64 FOUND* Matched: {0,$Width} {1}" -f $Pattern,$_)
    } else { #Keep scanning
      continue
    }
  }
}

Write-Warning ("Checking for suspicious events/IOCs (Events: *Process* 4688, *Tasks* 4698, *Win Defender* 5007):")
if ($scanWinProcess) { $ioc_process = Get-WinEvent -FilterHashtable $processfilter -ErrorAction SilentlyContinue -MaxEvents 50 | Select-Object TimeCreated,@{name='ParentProcessName';expression={ $_.Properties[13].Value }},@{name='NewProcessName';expression={ $_.Properties[5].Value }}, @{name='CommandLine';expression={ $_.Properties[8].Value }} | MultiSelect-String $IOCPatterns }
if ($scanWinAudit) { $ioc_auditpolicy = Get-WinEvent -FilterHashtable $auditpolicyfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated, Message | MultiSelect-String $IOCPatterns }
if ($scanWinTask) { $ioc_task = Get-WinEvent -FilterHashtable $taskfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='TaskName';expression={ $_.Properties[4].Value }}, @{name='TaskContent';expression={ $_.Properties[5].Value }} | MultiSelect-String $IOCPatterns }
if ($scanWinAV) { $ioc_winav = Get-WinEvent -FilterHashtable $winavfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated, Message | MultiSelect-String $IOCPatterns }
if ($scanWinPSLogs) {$ioc_winps = Get-WinEvent -FilterHashtable $winpsfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='Message';expression={ $_.Properties[2].Value }} | MultiSelect-String $IOCPatterns } #if ($scanWinPSLogs -eq 'True') {$ioc_winps = Get-WinEvent -FilterHashtable $winpsfilter -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Message | MultiSelect-String $IOCPatterns }

#Base64 section
Write-Warning ("Checking for suspicious Base64 encoded events/IOCs:")
if ($scanBase64Process) { $ioc_processbase64 = Get-WinEvent -FilterHashtable $processfilter  -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='ParentProcessName';expression={ $_.Properties[13].Value }},@{name='NewProcessName';expression={ $_.Properties[5].Value }}, @{name='CommandLine';expression={ $_.Properties[8].Value }} | MultiSelect-Base64String $IOCPatterns }
if ($scanBase64Tasks) { $ioc_taskbase64 = Get-WinEvent -FilterHashtable $taskfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='TaskName';expression={ $_.Properties[4].Value }}, @{name='TaskContent';expression={ $_.Properties[5].Value }} | MultiSelect-Base64String $IOCPatterns }
if ($scanBase64WinAV) { $ioc_winavbase64 = Get-WinEvent -FilterHashtable $winavfilter  -ErrorAction SilentlyContinue | Select-Object TimeCreated, Message | MultiSelect-Base64String $IOCPatterns }
if ($scanBase64WinPS) { $ioc_winpsbase64 = Get-WinEvent -FilterHashtable $winpsfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='Message';expression={ $_.Properties[2].Value }} | MultiSelect-Base64String $IOCPatterns }

if ($outputGrid) {
  if ($ioc_process -ne '') { $ioc_process | Out-GridView -Title 'IOCs EventID 4688/1102' }
  if ($ioc_auditpolicy -ne '') { $ioc_auditpolicy | Out-GridView -Title 'IOCs EventID 4719' }
  if ($ioc_task -ne '') { $ioc_task | Out-GridView -Title 'IOCs EventID 4698' }
  if ($ioc_winav -ne '') { $ioc_winav | Out-GridView -Title 'WinAv IOCs EventID 5007, 1116' }
  if ($ioc_winps -ne '') { $ioc_winps | Out-GridView -Title 'Win Powershell IOCs EventID 4104' }
  if ($ioc_processbase64 -ne '') { $ioc_processbase64 | Out-GridView -Title 'Base64 IOCs EventID 4688' }
  if ($ioc_taskbase64 -ne '') { $ioc_taskbase64 | Out-GridView -Title 'Base64 IOCs EventID 4698' }
  if ($ioc_winpsbase64 -ne '') { $ioc_winpsbase64 | Out-GridView -Title 'Base64 IOCs EventID 4104' }
}

if ($saveToFile) {
  if ($ioc_process -ne '') { $ioc_process | Select-Object -Property NewProcessName, CommandLine | Out-File -Append -FilePath $savedir }
  if ($ioc_auditpolicy -ne '') { $ioc_auditpolicy | Select-Object -ExpandProperty Message | Out-File -Append -FilePath $savedir }
  if ($ioc_task -ne '') { $ioc_task | Out-File -Append -FilePath $savedir }
  if ($ioc_winps -ne '') { $ioc_winps | Out-File -Append -FilePath $savedir }
  if ($ioc_winav -ne '') { $ioc_winav | Select-Object -ExpandProperty Message | Out-File -Append -FilePath $savedir }
  if ($ioc_processbase64 -ne '') { $ioc_processbase64 | Out-File -Append -FilePath $savedir2 }
  if ($ioc_taskbase64 -ne '') { $ioc_taskbase64 | Out-File -Append -FilePath $savedir2 }
  if ($ioc_winpsbase64 -ne '') { $ioc_winpsbase64 | Out-File -Append -FilePath $savedir2 }
}
