#Requires -RunAsAdministrator
<#
.SYNOPSIS
Common IOC Powershell Detection Script
.DESCRIPTION
Uses known IOC strings executed through cmd, powershell, etc to discover common exploit patterns in APTs on Windows.
The script will search through the following event viewer logs:
(Audit Process Creation logging) Audit event 4688
(Audit Other Object Access Events) Audit event 4698
(PowerShell Script Block Logging) - Microsoft-Windows-PowerShell/Operational event 4104
(Audit Net Share access) - EventID 5140 Network share object was accessed check for files being moved between PCs
.EXAMPLE
PS> . .\IOCdetectWIN.ps1
Run the script with default settings
.NOTES
.Author: James Kelly
https://gmuisg.org
#>

# REQUIRES Audit Process Creation logging. Audit event 4688(S): "A new process has been created" Configure/Enable the following: "Administrative Templates\System\Audit Process Creation" 'Include command line in process creation events' https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/component-updates/command-line-process-auditing
# REQUIRES Audit Other Object Access Events. Audit event 4698(S): "This policy setting allows you to audit events generated by the management of task scheduler jobs or COM+ objects."
# REQUIRES Audit Policy Change. Audit event 4719 : "If Success auditing is enabled, an audit entry is generated when an attempted change to user rights assignment policy, audit policy, or trust policy is successful."
# REQUIRES Turn on PowerShell Script Block Logging - This policy setting enables logging of all # PowerShell script input to the Microsoft-Windows-PowerShell/Operational event log Windows #PowerShell will log the processing of commands, script blocks, functions, and scripts - whether # invoked interactively, or through automation.
# REQUIRES Turn on Audit Net Share access 5140 - Network share object was accessed check for files being moved between PCs

$datestring = (Get-Date).ToString('s').Replace(':','-')
$saveDirMaster = 'C:\Security\'

$outputGrid = $True
$saveToFile = $False
$hoursToLookBack = -24 #Include -(followed by hours), -48 = Two days

$scanWinProcess = $True #You can enable/disable these *keep in mind speed will go down
$scanWinAudit = $True #You can enable/disable these *keep in mind speed will go down
$scanWinTask = $True #You can enable/disable these *keep in mind speed will go down
$scanWinAV = $True #You can enable/disable these *keep in mind speed will go down
$scanWinPSLogs = $False #disabled by default, need workaround script detecting itself
$scanWinShare = $True #You can enable/disable these *keep in mind speed will go down
$scanBase64Process = $True #You can enable/disable these 
$scanBase64Tasks = $True #You can enable/disable these

$IOCPatterns=$ioc_process=$ioc_winps=$ioc_winav=$ioc_task=$ioc_netshare=$ioc_processbase64=$processfilter=$auditpolicyfilter=$taskfilter=$winavfilter=$winpsfilter=$netsharefilter = ''
$ioc_taskbase64 = New-Object System.Collections.ArrayList
$savedir = $saveDirMaster + $datestring + '.txt'
$savedir2 = $saveDirMaster + $datestring + '.txt' 
$Width = -1 * ((Measure-Object -Maximum length).maximum + 1) 

$processfilter = @{
  LogName = 'Security'
  ID = 4688 #New process eventID
  StartTime = [datetime]::Now.AddHours($hoursToLookBack) #How far to look back in logs
}

$auditpolicyfilter = @{
  LogName = 'Security'
  ID = 4719, 1102 #Audit Policy change /All Events cleared log (System audit policy was changed.)
  StartTime = [datetime]::Now.AddHours($hoursToLookBack) #How far to look back in logs
}

$taskfilter = @{
  LogName = 'Security'
  ID = 4698, 4702 #New ScheduledTasks, Scheduled task was updated
  StartTime = [datetime]::Now.AddHours($hoursToLookBack) #How far to look back in logs
}

$netsharefilter = @{
  LogName = 'Security'
  ID = 5140 #Network share object was accessed https://atomicorp.com/how-to-defend-lateral-movement-in-windows-with-ossec/
  StartTime = [datetime]::Now.AddHours($hoursToLookBack) #How far to look back in logs
}

$winavfilter = @{
  LogName = 'Microsoft-Windows-Windows Defender/Operational'
  ID = 5001, 5007, 1116, 1121 #Defender modifications
  StartTime = [datetime]::Now.AddHours($hoursToLookBack)
}

$winpsfilter = @{ #WIP need to find workaround for script execution, Use out-grid filter DOES NOT CONTAIN
  LogName = 'Microsoft-Windows-PowerShell/Operational'
  ID = 4104 #Powershell Scriptblock - Execute a Remote Command
  StartTime = [datetime]::Now.AddHours($hoursToLookBack)
}

#https://github.com/SigmaHQ/sigma/blob/master/other/godmode_sigma_rule.yml
#got to add Sigma rules idea from https://github.com/dfirale/evtscanner, took some of his patterns too :)

$IOCPatterns = @( 
    ' -NoP ',                                      # Often used in malicious PowerShell commands 
    ' -W Hidden ',                                 # Often used in malicious PowerShell commands
    '-ep bypass',                                  # Often used in malicious PowerShell commands
    '-NoProfile -WindowStyle 1 -enc',              # Often used in malicious PowerShell commands
    'powershell -w h',                             # Often used in malicious PowerShell commands
    'powershell/w 01',                             # Often used in malicious PowerShell commands
    'powershell/w 01 /ep 0/nop/c',                 # Often used in malicious PowerShell commands
    '/w 1 /nop',                                   # Often used in malicious PowerShell commands
    'powershell -noP -sta -w 1 -enc',              # Often used in malicious PowerShell commands
    'powershell.exe -exec bypass',                 # Often used in malicious PowerShell commands
    'powershell -command',                         # Often used in malicious PowerShell commands
    'powershell -c iex',                           # Often used in malicious PowerShell commands
    'powershell -c iwr',                           # Often used in malicious PowerShell commands
    '[\-|\/|–|—|―][Ee^]{1,2}[NnCcOoDdEeMmAa^]+\s+[A-Za-z0-9+/=]{5,}', # Often used in malicious PowerShell commands got regex from https://github.com/splunk/security_content/blob/develop/detections/endpoint/malicious_powershell_process___encoded_command.yml
    ' -decode ',                                   # Used with certutil
    ' /decode ',                                   # Used with certutil 
    ' -e(?s).*JAB',                                # PowerShell encoded commands
    ' -e(?s).*CgAkAE',                             # PowerShell encoded commands like JAB but with white space https://www.huntress.com/blog/unraveling-a-reverse-shell-with-process-insights
    ' -e(?s).*CgAk',                               # PowerShell encoded commands like JAB but with white space https://www.huntress.com/blog/unraveling-a-reverse-shell-with-process-insights
    ' -e(?s).*SUVYI',                              # PowerShell encoded commands
    ' -e(?s).*SQBFAFgA',                           # PowerShell encoded commands
    ' -e(?s).*aWV4I',                              # PowerShell encoded commands
    ' -e(?s).*IAB',                                # PowerShell encoded commands
    ' -e(?s).*PAA',                                # PowerShell encoded commands
    ' -e(?s).*aQBlAHgA',                           # PowerShell encoded commands
    'vssadmin delete shadows',                     # Ransomware
    'reg SAVE HKLM\\SAM',                          # save registry SAM - syskey extraction
    ' -ma ',                                       # ProcDump
    'Microsoft\\Windows\\CurrentVersion\\Run',     # Run key in command line - often in combination with REG ADD
    '.downloadstring\(',                           # PowerShell download command
    '.downloadfile\(',                             # PowerShell download command
    ' /ticket:',                                   # Rubeus
    ' sekurlsa',                                   # Mimikatz
    ' p::d',                                       # Mimikatz 
    ';iex\(',                                      # PowerShell IEX
    '-Value iex',                                  # PowerShell Set-Alias command for iex
    'Set-Alias',                                   # PowerShell Set-Alias command can be used to hide iex, eval, etc
    'schtasks(?s).*/create(?s).*AppData',          # Scheduled task creation pointing to AppData
    '<Hidden>true</Hidden>',                       # Hidden Tasks
    'attrib +H',                                   # Hidden files
    'cmd /c schtasks /create /tn',                 # Create tasks using cmd /c
    'cmd /c schtasks /delete /tn',                 # Delete tasks using cmd /c
    ' comsvcs.dll,MiniDump',                       # Process dumping method apart from procdump
    ' comsvcs.dll,#24',                            # Process dumping method apart from procdump
    'Add-MpPreference(?s).*ExclusionPath',         # Defender exclusion
    'Add-MpPreference(?s).*ExclusionExtension',    # Defender exclusion
    'Add-MpPreference(?s).*ExclusionProcess',      # Defender exclusion
    'DisableBehaviorMonitoring $true',             # Defender disable
    'DisableRunTimeMonitoring $true',              # Defender disable
    'sc(?s).*stop(?s).*WinDefend',                 # Defender disable
    'sc(?s).*config(?s).*WinDefend(?s).*disabled', # Defender disable
    'FromBase64String\(',                          # Suspicious FromBase64String expressions
    'base64_encode',                               # Suspicious FromBase64String expressions
    'base64_decode',                               # Suspicious FromBase64String expressions
    'VBscript.Encode',                             # Suspicious FromBase64String expressions
    'cmd.exe /Q /c(?s).*\\\\127.0.0.1\\',          # wmiexec.py https://github.com/SecureAuthCorp/impacket/blob/master/examples/wmiexec.py#L287
    'cmd.exe /C(?s).*\\\\Temp\\',                  # atexec.py  https://github.com/SecureAuthCorp/impacket/blob/master/examples/atexec.py#L122
    'cmd.exe /Q /c start',
    'cmd.exe /Q /c',
    'C:\\Users\\.*?\\AppData\\[^\\].*?\bstart\b',  #WIP maybe add .js .exe, etc https://stackoverflow.com/questions/37750620/regular-expression-for-folder-path
    '/c copy C:\Windows\System32\cmd.exe ',
    '%COMSPEC%',
    'powershell . (nslookup -q=txt)',              # way to avoid iex and web request through webpage with code twitter @Alh4zr3d
    '& powershell (nslookup -q=txt)',              # way to avoid iex and web request through webpage with code twitter @Alh4zr3d
    '(nslookup -q=txt)[-1]',                       # way to avoid iex and web request through webpage with code twitter @Alh4zr3d
    'nslookup -q=txt',                             # way to avoid iex and web request through webpage with code twitter @Alh4zr3d
    'rundll32.exe javascript:',
    'rundll32.exe C:\Windows\system32\davclnt.dll,DavSetCookie', #load DLLs and modules of program
    'C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp',
    '\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup',
    'whoami /priv',
    'bitsadmin.exe',
    'bitsadmin /SetNotifyCmdLine',
    'bitsadmin /addfile',
    'bitsadmin /transfer',
    'Start-BitsTransfer -Source',
    'WScript.Shell',
    'WScriptShell.CreateShortcut',
    'WScriptShell.SpecialFolders',
    'Scriptrunner.exe',
    'Cscript.exe',
    'WScript.exe',
    'regsvr32.exe',
    'net.exe',
    'at.exe \\',
    '\\*\\C$',
    'tasklist',
    'netsh advfirewall',
    'New-NetFirewallRule',
    'wmic process call create',
    'wmic /node',
    'pypykatz live lsa --method handledup',
    'Get-EventLog -LogName * | ForEach { Clear-EventLog $_.Log',
    'Get-WinEvent -ListLog * -Force | % { Wevtutil.exe cl $_.LogName }',
    'wevtutil cl',
    'Clear-EventLog',
    '[System.Diagnostics.Eventing.Reader.EventLogSession]::GlobalSession.ClearLog'
    'The audit log was cleared.',
    'System audit policy was changed.',
    'HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Exclusions',
    'HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Real-Time Protection\\DisableRealtimeMonitoring',
    'Microsoft Defender Antivirus Real-time Protection scanning for malware and other potentially unwanted software was disabled.',
    'Microsoft Defender Exploit Guard has blocked an operation that is not allowed by your IT administrator.'
)

function Test-Base64 {
  param(
    [Parameter(ValueFromPipeline)] 
    [string] $String
  )
  process {
    try { $null=[Convert]::FromBase64String($String); $true } catch { $false }
  }
}

filter DecodeB64 {
  return [Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($extractedBase64))
}

filter CommandLine-ConvertBase64String {
  if($_.CommandLine -eq '') {return} #skip if no args
  $regex = '\s+([A-Za-z0-9+/]{20}\S+$)' #extract base64 backup regex if issues come up ^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}={2})$
  $extractedBase64 = $_.CommandLine | Select-String -Pattern $regex -AllMatches | % {$_.Matches} | % {$_.Value}
  if(!(Test-Base64 $extractedBase64)) {return} #test to see if valid base64 string
  $extractedBase64 | DecodeB64 #send extracted b64 to decode filter
}

filter TaskContent-ConvertBase64String {
  $regex = '\s+([A-Za-z0-9+/]{20}\S+$)' #extract base64
  $extractedBase64 = $_ | Select-String -Pattern $regex -AllMatches | % {$_.Matches} | % {$_.Value}
  if(!(Test-Base64 $extractedBase64)) {return}
  $extractedBase64 | DecodeB64
}

filter MultiSelect-String ([string[]]$Patterns) {
  foreach ($Pattern in $Patterns) { # Check the current item against all patterns.
	  $foundPattern = $_ | Select-String -Pattern $Pattern -AllMatches #Optimize var cache 
    if ($foundPattern) { # If one of the patterns does not match, continue checking same item.
      $_ #We found a match!
    }
    continue
  }
}

Write-Warning ("Checking for suspicious events/IOCs (Events: *Process* 4688, *Tasks* 4698, *Win Defender* 5007, *Network share accessed 5140* ):")
if ($scanWinProcess) { $ioc_process = Get-WinEvent -FilterHashtable $processfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='User';expression={ $_.Properties[1].Value }},@{name='ParentProcessName';expression={ $_.Properties[13].Value }},@{name='NewProcessName';expression={ $_.Properties[5].Value }}, @{name='CommandLine';expression={ $_.Properties[8].Value }} | MultiSelect-String $IOCPatterns }
if ($scanWinAudit) { $ioc_auditpolicy = Get-WinEvent -FilterHashtable $auditpolicyfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated, Message | MultiSelect-String $IOCPatterns }
if ($scanWinTask) { $ioc_task = Get-WinEvent -FilterHashtable $taskfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='TaskName';expression={ $_.Properties[4].Value }}, @{name='TaskContent';expression={ $_.Properties[5].Value }} | MultiSelect-String $IOCPatterns }
if ($scanWinAV) { $ioc_winav = Get-WinEvent -FilterHashtable $winavfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated, Message | MultiSelect-String $IOCPatterns }
if ($scanWinPSLogs) {$ioc_winps = Get-WinEvent -FilterHashtable $winpsfilter -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='Message';expression={ $_.Properties[2].Value }} | MultiSelect-String $IOCPatterns }
if ($scanWinShare) {$ioc_netshare = Get-WinEvent -FilterHashtable $netsharefilter -ErrorAction SilentlyContinue | Select-Object TimeCreated,@{name='Owner';expression={ $_.Properties[1].Value }},@{name='Share Name';expression={ $_.Properties[7].Value }}, @{name='Share Path';expression={ $_.Properties[8].Value }} | MultiSelect-String $IOCPatterns }

#Base64 section
Write-Warning ("Checking for suspicious Base64 encoded events/IOCs:")

#(Get-WinEvent -FilterHashtable $taskfilter -ErrorAction SilentlyContinue | Select-Object * | Out-String -Stream | Select-String -Pattern '<Command>', '<Arguments>', '</Arguments>') -replace '\s\s+', '' -replace '</Arguments>', '' | TaskContent-ConvertBase64String } #WIP does not work (Get-WinEvent -FilterHashtable $taskfilter -ErrorAction SilentlyContinue | Select-Object * | Out-String -Stream | Select-String -Pattern '<Command>', '<Arguments>', '</Arguments>') -replace '\s\s', '' | Select-String -Pattern $regex -AllMatches | % {$_.Matches} | % {$_.Value}

if ($scanBase64Process) { $ioc_processbase64 = ($ioc_process | CommandLine-ConvertBase64String) } #works decodes stuff
if ($scanBase64Tasks) { #working great
  foreach($task in $ioc_task){
    $entry = [xml]$task.TaskContent
    $ioc_taskbase64.Add(($entry.Task.Actions.Exec.Arguments | TaskContent-ConvertBase64String))
  }
}

if ($outputGrid) {
  if ($ioc_process -ne '') { $ioc_process | Out-GridView -Title 'IOCs EventID 4688/1102' }
  if ($ioc_auditpolicy -ne '') { $ioc_auditpolicy | Out-GridView -Title 'IOCs EventID 4719' }
  if ($ioc_task -ne '') { $ioc_task | Out-GridView -Title 'IOCs EventID 4698' }
  if ($ioc_winav -ne '') { $ioc_winav | Out-GridView -Title 'WinAv IOCs EventID 5007, 1116' }
  if ($ioc_winps -ne '') { $ioc_winps | Out-GridView -Title 'Win Powershell IOCs EventID 4104' }
  if ($ioc_netshare -ne '') { $ioc_netshare | Out-GridView -Title 'Win network share IOCs EventID 5140' }
  if ($ioc_processbase64 -ne '') { $ioc_processbase64 | Out-GridView -Title 'Base64 IOCs EventID 4688' }
  if ($ioc_taskbase64 -ne '') { $ioc_taskbase64 | Out-GridView -Title 'Base64 IOCs EventID 4698' }
}

if ($saveToFile) {
  if ($ioc_process -ne '') { $ioc_process | Select-Object * | Out-File -Append -FilePath $savedir }
  if ($ioc_auditpolicy -ne '') { $ioc_auditpolicy | Select-Object -ExpandProperty Message | Out-File -Append -FilePath $savedir }
  if ($ioc_task -ne '') { $ioc_task | Select-Object -ExpandProperty TaskContent | Out-File -Append -FilePath $savedir }
  if ($ioc_winps -ne '') { $ioc_winps | Out-File -Append -FilePath $savedir }
  if ($ioc_winav -ne '') { $ioc_winav | Select-Object -ExpandProperty Message | Out-File -Append -FilePath $savedir }
  if ($ioc_netshare -ne '') { $ioc_netshare | Out-File -Append -FilePath $savedir }
  if ($ioc_processbase64 -ne '') { $ioc_processbase64  | Out-File -Append -FilePath $savedir2 }
  if ($ioc_taskbase64 -ne '') { $ioc_taskbase64 | Out-File -Append -FilePath $savedir2 }
}
